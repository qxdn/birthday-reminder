// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qxdn/birthday/model"
)

func newSubscriber(db *gorm.DB, opts ...gen.DOOption) subscriber {
	_subscriber := subscriber{}

	_subscriber.subscriberDo.UseDB(db, opts...)
	_subscriber.subscriberDo.UseModel(&model.Subscriber{})

	tableName := _subscriber.subscriberDo.TableName()
	_subscriber.ALL = field.NewAsterisk(tableName)
	_subscriber.Id = field.NewInt(tableName, "id")
	_subscriber.GmtCreate = field.NewTime(tableName, "gmt_create")
	_subscriber.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_subscriber.Email = field.NewString(tableName, "email")
	_subscriber.Active = field.NewBool(tableName, "active")

	_subscriber.fillFieldMap()

	return _subscriber
}

type subscriber struct {
	subscriberDo

	ALL       field.Asterisk
	Id        field.Int
	GmtCreate field.Time
	GmtUpdate field.Time
	Email     field.String
	Active    field.Bool

	fieldMap map[string]field.Expr
}

func (s subscriber) Table(newTableName string) *subscriber {
	s.subscriberDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscriber) As(alias string) *subscriber {
	s.subscriberDo.DO = *(s.subscriberDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscriber) updateTableName(table string) *subscriber {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt(table, "id")
	s.GmtCreate = field.NewTime(table, "gmt_create")
	s.GmtUpdate = field.NewTime(table, "gmt_update")
	s.Email = field.NewString(table, "email")
	s.Active = field.NewBool(table, "active")

	s.fillFieldMap()

	return s
}

func (s *subscriber) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscriber) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.Id
	s.fieldMap["gmt_create"] = s.GmtCreate
	s.fieldMap["gmt_update"] = s.GmtUpdate
	s.fieldMap["email"] = s.Email
	s.fieldMap["active"] = s.Active
}

func (s subscriber) clone(db *gorm.DB) subscriber {
	s.subscriberDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscriber) replaceDB(db *gorm.DB) subscriber {
	s.subscriberDo.ReplaceDB(db)
	return s
}

type subscriberDo struct{ gen.DO }

type ISubscriberDo interface {
	gen.SubQuery
	Debug() ISubscriberDo
	WithContext(ctx context.Context) ISubscriberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubscriberDo
	WriteDB() ISubscriberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubscriberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubscriberDo
	Not(conds ...gen.Condition) ISubscriberDo
	Or(conds ...gen.Condition) ISubscriberDo
	Select(conds ...field.Expr) ISubscriberDo
	Where(conds ...gen.Condition) ISubscriberDo
	Order(conds ...field.Expr) ISubscriberDo
	Distinct(cols ...field.Expr) ISubscriberDo
	Omit(cols ...field.Expr) ISubscriberDo
	Join(table schema.Tabler, on ...field.Expr) ISubscriberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriberDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubscriberDo
	Group(cols ...field.Expr) ISubscriberDo
	Having(conds ...gen.Condition) ISubscriberDo
	Limit(limit int) ISubscriberDo
	Offset(offset int) ISubscriberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriberDo
	Unscoped() ISubscriberDo
	Create(values ...*model.Subscriber) error
	CreateInBatches(values []*model.Subscriber, batchSize int) error
	Save(values ...*model.Subscriber) error
	First() (*model.Subscriber, error)
	Take() (*model.Subscriber, error)
	Last() (*model.Subscriber, error)
	Find() ([]*model.Subscriber, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Subscriber, err error)
	FindInBatches(result *[]*model.Subscriber, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Subscriber) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubscriberDo
	Assign(attrs ...field.AssignExpr) ISubscriberDo
	Joins(fields ...field.RelationField) ISubscriberDo
	Preload(fields ...field.RelationField) ISubscriberDo
	FirstOrInit() (*model.Subscriber, error)
	FirstOrCreate() (*model.Subscriber, error)
	FindByPage(offset int, limit int) (result []*model.Subscriber, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubscriberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subscriberDo) Debug() ISubscriberDo {
	return s.withDO(s.DO.Debug())
}

func (s subscriberDo) WithContext(ctx context.Context) ISubscriberDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscriberDo) ReadDB() ISubscriberDo {
	return s.Clauses(dbresolver.Read)
}

func (s subscriberDo) WriteDB() ISubscriberDo {
	return s.Clauses(dbresolver.Write)
}

func (s subscriberDo) Session(config *gorm.Session) ISubscriberDo {
	return s.withDO(s.DO.Session(config))
}

func (s subscriberDo) Clauses(conds ...clause.Expression) ISubscriberDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscriberDo) Returning(value interface{}, columns ...string) ISubscriberDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscriberDo) Not(conds ...gen.Condition) ISubscriberDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscriberDo) Or(conds ...gen.Condition) ISubscriberDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscriberDo) Select(conds ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscriberDo) Where(conds ...gen.Condition) ISubscriberDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscriberDo) Order(conds ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscriberDo) Distinct(cols ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscriberDo) Omit(cols ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscriberDo) Join(table schema.Tabler, on ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscriberDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscriberDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscriberDo) Group(cols ...field.Expr) ISubscriberDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscriberDo) Having(conds ...gen.Condition) ISubscriberDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscriberDo) Limit(limit int) ISubscriberDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscriberDo) Offset(offset int) ISubscriberDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscriberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriberDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscriberDo) Unscoped() ISubscriberDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscriberDo) Create(values ...*model.Subscriber) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscriberDo) CreateInBatches(values []*model.Subscriber, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscriberDo) Save(values ...*model.Subscriber) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscriberDo) First() (*model.Subscriber, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscriber), nil
	}
}

func (s subscriberDo) Take() (*model.Subscriber, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscriber), nil
	}
}

func (s subscriberDo) Last() (*model.Subscriber, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscriber), nil
	}
}

func (s subscriberDo) Find() ([]*model.Subscriber, error) {
	result, err := s.DO.Find()
	return result.([]*model.Subscriber), err
}

func (s subscriberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Subscriber, err error) {
	buf := make([]*model.Subscriber, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscriberDo) FindInBatches(result *[]*model.Subscriber, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscriberDo) Attrs(attrs ...field.AssignExpr) ISubscriberDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscriberDo) Assign(attrs ...field.AssignExpr) ISubscriberDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscriberDo) Joins(fields ...field.RelationField) ISubscriberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscriberDo) Preload(fields ...field.RelationField) ISubscriberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscriberDo) FirstOrInit() (*model.Subscriber, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscriber), nil
	}
}

func (s subscriberDo) FirstOrCreate() (*model.Subscriber, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscriber), nil
	}
}

func (s subscriberDo) FindByPage(offset int, limit int) (result []*model.Subscriber, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscriberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscriberDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscriberDo) Delete(models ...*model.Subscriber) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscriberDo) withDO(do gen.Dao) *subscriberDo {
	s.DO = *do.(*gen.DO)
	return s
}
