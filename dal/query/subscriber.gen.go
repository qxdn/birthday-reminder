// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qxdn/birthday/dal/entity"
)

func newSubscriberDO(db *gorm.DB, opts ...gen.DOOption) subscriberDO {
	_subscriberDO := subscriberDO{}

	_subscriberDO.subscriberDODo.UseDB(db, opts...)
	_subscriberDO.subscriberDODo.UseModel(&entity.SubscriberDO{})

	tableName := _subscriberDO.subscriberDODo.TableName()
	_subscriberDO.ALL = field.NewAsterisk(tableName)
	_subscriberDO.ID = field.NewInt64(tableName, "id")
	_subscriberDO.GmtCreate = field.NewTime(tableName, "gmt_create")
	_subscriberDO.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_subscriberDO.Active = field.NewField(tableName, "active")
	_subscriberDO.Email = field.NewString(tableName, "email")

	_subscriberDO.fillFieldMap()

	return _subscriberDO
}

type subscriberDO struct {
	subscriberDODo

	ALL       field.Asterisk
	ID        field.Int64
	GmtCreate field.Time
	GmtUpdate field.Time
	Active    field.Field
	Email     field.String

	fieldMap map[string]field.Expr
}

func (s subscriberDO) Table(newTableName string) *subscriberDO {
	s.subscriberDODo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscriberDO) As(alias string) *subscriberDO {
	s.subscriberDODo.DO = *(s.subscriberDODo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscriberDO) updateTableName(table string) *subscriberDO {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.GmtCreate = field.NewTime(table, "gmt_create")
	s.GmtUpdate = field.NewTime(table, "gmt_update")
	s.Active = field.NewField(table, "active")
	s.Email = field.NewString(table, "email")

	s.fillFieldMap()

	return s
}

func (s *subscriberDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscriberDO) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["gmt_create"] = s.GmtCreate
	s.fieldMap["gmt_update"] = s.GmtUpdate
	s.fieldMap["active"] = s.Active
	s.fieldMap["email"] = s.Email
}

func (s subscriberDO) clone(db *gorm.DB) subscriberDO {
	s.subscriberDODo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscriberDO) replaceDB(db *gorm.DB) subscriberDO {
	s.subscriberDODo.ReplaceDB(db)
	return s
}

type subscriberDODo struct{ gen.DO }

type ISubscriberDODo interface {
	gen.SubQuery
	Debug() ISubscriberDODo
	WithContext(ctx context.Context) ISubscriberDODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubscriberDODo
	WriteDB() ISubscriberDODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubscriberDODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubscriberDODo
	Not(conds ...gen.Condition) ISubscriberDODo
	Or(conds ...gen.Condition) ISubscriberDODo
	Select(conds ...field.Expr) ISubscriberDODo
	Where(conds ...gen.Condition) ISubscriberDODo
	Order(conds ...field.Expr) ISubscriberDODo
	Distinct(cols ...field.Expr) ISubscriberDODo
	Omit(cols ...field.Expr) ISubscriberDODo
	Join(table schema.Tabler, on ...field.Expr) ISubscriberDODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriberDODo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubscriberDODo
	Group(cols ...field.Expr) ISubscriberDODo
	Having(conds ...gen.Condition) ISubscriberDODo
	Limit(limit int) ISubscriberDODo
	Offset(offset int) ISubscriberDODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriberDODo
	Unscoped() ISubscriberDODo
	Create(values ...*entity.SubscriberDO) error
	CreateInBatches(values []*entity.SubscriberDO, batchSize int) error
	Save(values ...*entity.SubscriberDO) error
	First() (*entity.SubscriberDO, error)
	Take() (*entity.SubscriberDO, error)
	Last() (*entity.SubscriberDO, error)
	Find() ([]*entity.SubscriberDO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SubscriberDO, err error)
	FindInBatches(result *[]*entity.SubscriberDO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SubscriberDO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubscriberDODo
	Assign(attrs ...field.AssignExpr) ISubscriberDODo
	Joins(fields ...field.RelationField) ISubscriberDODo
	Preload(fields ...field.RelationField) ISubscriberDODo
	FirstOrInit() (*entity.SubscriberDO, error)
	FirstOrCreate() (*entity.SubscriberDO, error)
	FindByPage(offset int, limit int) (result []*entity.SubscriberDO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubscriberDODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subscriberDODo) Debug() ISubscriberDODo {
	return s.withDO(s.DO.Debug())
}

func (s subscriberDODo) WithContext(ctx context.Context) ISubscriberDODo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscriberDODo) ReadDB() ISubscriberDODo {
	return s.Clauses(dbresolver.Read)
}

func (s subscriberDODo) WriteDB() ISubscriberDODo {
	return s.Clauses(dbresolver.Write)
}

func (s subscriberDODo) Session(config *gorm.Session) ISubscriberDODo {
	return s.withDO(s.DO.Session(config))
}

func (s subscriberDODo) Clauses(conds ...clause.Expression) ISubscriberDODo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscriberDODo) Returning(value interface{}, columns ...string) ISubscriberDODo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscriberDODo) Not(conds ...gen.Condition) ISubscriberDODo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscriberDODo) Or(conds ...gen.Condition) ISubscriberDODo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscriberDODo) Select(conds ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscriberDODo) Where(conds ...gen.Condition) ISubscriberDODo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscriberDODo) Order(conds ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscriberDODo) Distinct(cols ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscriberDODo) Omit(cols ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscriberDODo) Join(table schema.Tabler, on ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscriberDODo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscriberDODo) RightJoin(table schema.Tabler, on ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscriberDODo) Group(cols ...field.Expr) ISubscriberDODo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscriberDODo) Having(conds ...gen.Condition) ISubscriberDODo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscriberDODo) Limit(limit int) ISubscriberDODo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscriberDODo) Offset(offset int) ISubscriberDODo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscriberDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriberDODo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscriberDODo) Unscoped() ISubscriberDODo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscriberDODo) Create(values ...*entity.SubscriberDO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscriberDODo) CreateInBatches(values []*entity.SubscriberDO, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscriberDODo) Save(values ...*entity.SubscriberDO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscriberDODo) First() (*entity.SubscriberDO, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SubscriberDO), nil
	}
}

func (s subscriberDODo) Take() (*entity.SubscriberDO, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SubscriberDO), nil
	}
}

func (s subscriberDODo) Last() (*entity.SubscriberDO, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SubscriberDO), nil
	}
}

func (s subscriberDODo) Find() ([]*entity.SubscriberDO, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SubscriberDO), err
}

func (s subscriberDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SubscriberDO, err error) {
	buf := make([]*entity.SubscriberDO, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscriberDODo) FindInBatches(result *[]*entity.SubscriberDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscriberDODo) Attrs(attrs ...field.AssignExpr) ISubscriberDODo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscriberDODo) Assign(attrs ...field.AssignExpr) ISubscriberDODo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscriberDODo) Joins(fields ...field.RelationField) ISubscriberDODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscriberDODo) Preload(fields ...field.RelationField) ISubscriberDODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscriberDODo) FirstOrInit() (*entity.SubscriberDO, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SubscriberDO), nil
	}
}

func (s subscriberDODo) FirstOrCreate() (*entity.SubscriberDO, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SubscriberDO), nil
	}
}

func (s subscriberDODo) FindByPage(offset int, limit int) (result []*entity.SubscriberDO, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscriberDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscriberDODo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscriberDODo) Delete(models ...*entity.SubscriberDO) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscriberDODo) withDO(do gen.Dao) *subscriberDODo {
	s.DO = *do.(*gen.DO)
	return s
}
