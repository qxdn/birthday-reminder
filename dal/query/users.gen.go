// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qxdn/birthday/dal/entity"
)

func newUsersDO(db *gorm.DB, opts ...gen.DOOption) usersDO {
	_usersDO := usersDO{}

	_usersDO.usersDODo.UseDB(db, opts...)
	_usersDO.usersDODo.UseModel(&entity.UsersDO{})

	tableName := _usersDO.usersDODo.TableName()
	_usersDO.ALL = field.NewAsterisk(tableName)
	_usersDO.ID = field.NewInt64(tableName, "id")
	_usersDO.GmtCreate = field.NewTime(tableName, "gmt_create")
	_usersDO.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_usersDO.Username = field.NewString(tableName, "username")
	_usersDO.Password = field.NewString(tableName, "password")
	_usersDO.Avatar = field.NewString(tableName, "avatar")
	_usersDO.Email = field.NewString(tableName, "email")
	_usersDO.Role = field.NewString(tableName, "role")

	_usersDO.fillFieldMap()

	return _usersDO
}

type usersDO struct {
	usersDODo

	ALL       field.Asterisk
	ID        field.Int64
	GmtCreate field.Time
	GmtUpdate field.Time
	Username  field.String
	Password  field.String
	Avatar    field.String
	Email     field.String
	Role      field.String

	fieldMap map[string]field.Expr
}

func (u usersDO) Table(newTableName string) *usersDO {
	u.usersDODo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersDO) As(alias string) *usersDO {
	u.usersDODo.DO = *(u.usersDODo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersDO) updateTableName(table string) *usersDO {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.GmtCreate = field.NewTime(table, "gmt_create")
	u.GmtUpdate = field.NewTime(table, "gmt_update")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Avatar = field.NewString(table, "avatar")
	u.Email = field.NewString(table, "email")
	u.Role = field.NewString(table, "role")

	u.fillFieldMap()

	return u
}

func (u *usersDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersDO) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["gmt_create"] = u.GmtCreate
	u.fieldMap["gmt_update"] = u.GmtUpdate
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["email"] = u.Email
	u.fieldMap["role"] = u.Role
}

func (u usersDO) clone(db *gorm.DB) usersDO {
	u.usersDODo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersDO) replaceDB(db *gorm.DB) usersDO {
	u.usersDODo.ReplaceDB(db)
	return u
}

type usersDODo struct{ gen.DO }

type IUsersDODo interface {
	gen.SubQuery
	Debug() IUsersDODo
	WithContext(ctx context.Context) IUsersDODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersDODo
	WriteDB() IUsersDODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersDODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersDODo
	Not(conds ...gen.Condition) IUsersDODo
	Or(conds ...gen.Condition) IUsersDODo
	Select(conds ...field.Expr) IUsersDODo
	Where(conds ...gen.Condition) IUsersDODo
	Order(conds ...field.Expr) IUsersDODo
	Distinct(cols ...field.Expr) IUsersDODo
	Omit(cols ...field.Expr) IUsersDODo
	Join(table schema.Tabler, on ...field.Expr) IUsersDODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersDODo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersDODo
	Group(cols ...field.Expr) IUsersDODo
	Having(conds ...gen.Condition) IUsersDODo
	Limit(limit int) IUsersDODo
	Offset(offset int) IUsersDODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersDODo
	Unscoped() IUsersDODo
	Create(values ...*entity.UsersDO) error
	CreateInBatches(values []*entity.UsersDO, batchSize int) error
	Save(values ...*entity.UsersDO) error
	First() (*entity.UsersDO, error)
	Take() (*entity.UsersDO, error)
	Last() (*entity.UsersDO, error)
	Find() ([]*entity.UsersDO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UsersDO, err error)
	FindInBatches(result *[]*entity.UsersDO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UsersDO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersDODo
	Assign(attrs ...field.AssignExpr) IUsersDODo
	Joins(fields ...field.RelationField) IUsersDODo
	Preload(fields ...field.RelationField) IUsersDODo
	FirstOrInit() (*entity.UsersDO, error)
	FirstOrCreate() (*entity.UsersDO, error)
	FindByPage(offset int, limit int) (result []*entity.UsersDO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersDODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersDODo) Debug() IUsersDODo {
	return u.withDO(u.DO.Debug())
}

func (u usersDODo) WithContext(ctx context.Context) IUsersDODo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersDODo) ReadDB() IUsersDODo {
	return u.Clauses(dbresolver.Read)
}

func (u usersDODo) WriteDB() IUsersDODo {
	return u.Clauses(dbresolver.Write)
}

func (u usersDODo) Session(config *gorm.Session) IUsersDODo {
	return u.withDO(u.DO.Session(config))
}

func (u usersDODo) Clauses(conds ...clause.Expression) IUsersDODo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersDODo) Returning(value interface{}, columns ...string) IUsersDODo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersDODo) Not(conds ...gen.Condition) IUsersDODo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersDODo) Or(conds ...gen.Condition) IUsersDODo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersDODo) Select(conds ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersDODo) Where(conds ...gen.Condition) IUsersDODo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersDODo) Order(conds ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersDODo) Distinct(cols ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersDODo) Omit(cols ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersDODo) Join(table schema.Tabler, on ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersDODo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersDODo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersDODo) Group(cols ...field.Expr) IUsersDODo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersDODo) Having(conds ...gen.Condition) IUsersDODo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersDODo) Limit(limit int) IUsersDODo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersDODo) Offset(offset int) IUsersDODo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersDODo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersDODo) Unscoped() IUsersDODo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersDODo) Create(values ...*entity.UsersDO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersDODo) CreateInBatches(values []*entity.UsersDO, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersDODo) Save(values ...*entity.UsersDO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersDODo) First() (*entity.UsersDO, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UsersDO), nil
	}
}

func (u usersDODo) Take() (*entity.UsersDO, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UsersDO), nil
	}
}

func (u usersDODo) Last() (*entity.UsersDO, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UsersDO), nil
	}
}

func (u usersDODo) Find() ([]*entity.UsersDO, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UsersDO), err
}

func (u usersDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UsersDO, err error) {
	buf := make([]*entity.UsersDO, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersDODo) FindInBatches(result *[]*entity.UsersDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersDODo) Attrs(attrs ...field.AssignExpr) IUsersDODo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersDODo) Assign(attrs ...field.AssignExpr) IUsersDODo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersDODo) Joins(fields ...field.RelationField) IUsersDODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersDODo) Preload(fields ...field.RelationField) IUsersDODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersDODo) FirstOrInit() (*entity.UsersDO, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UsersDO), nil
	}
}

func (u usersDODo) FirstOrCreate() (*entity.UsersDO, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UsersDO), nil
	}
}

func (u usersDODo) FindByPage(offset int, limit int) (result []*entity.UsersDO, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersDODo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersDODo) Delete(models ...*entity.UsersDO) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersDODo) withDO(do gen.Dao) *usersDODo {
	u.DO = *do.(*gen.DO)
	return u
}
