// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qxdn/birthday/model"
)

func newCharacter(db *gorm.DB, opts ...gen.DOOption) character {
	_character := character{}

	_character.characterDo.UseDB(db, opts...)
	_character.characterDo.UseModel(&model.Character{})

	tableName := _character.characterDo.TableName()
	_character.ALL = field.NewAsterisk(tableName)
	_character.Id = field.NewInt(tableName, "id")
	_character.GmtCreate = field.NewTime(tableName, "gmt_create")
	_character.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_character.Name = field.NewString(tableName, "name")
	_character.OriginName = field.NewString(tableName, "origin_name")
	_character.OtherName = field.NewField(tableName, "other_name")
	_character.BirthYear = field.NewInt(tableName, "birth_year")
	_character.BirthMonth = field.NewInt(tableName, "birth_month")
	_character.BirthDay = field.NewInt(tableName, "birth_day")
	_character.Content = field.NewField(tableName, "content")
	_character.Comment = field.NewString(tableName, "comment")

	_character.fillFieldMap()

	return _character
}

type character struct {
	characterDo

	ALL        field.Asterisk
	Id         field.Int
	GmtCreate  field.Time
	GmtUpdate  field.Time
	Name       field.String
	OriginName field.String
	OtherName  field.Field
	BirthYear  field.Int
	BirthMonth field.Int
	BirthDay   field.Int
	Content    field.Field
	Comment    field.String

	fieldMap map[string]field.Expr
}

func (c character) Table(newTableName string) *character {
	c.characterDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c character) As(alias string) *character {
	c.characterDo.DO = *(c.characterDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *character) updateTableName(table string) *character {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewInt(table, "id")
	c.GmtCreate = field.NewTime(table, "gmt_create")
	c.GmtUpdate = field.NewTime(table, "gmt_update")
	c.Name = field.NewString(table, "name")
	c.OriginName = field.NewString(table, "origin_name")
	c.OtherName = field.NewField(table, "other_name")
	c.BirthYear = field.NewInt(table, "birth_year")
	c.BirthMonth = field.NewInt(table, "birth_month")
	c.BirthDay = field.NewInt(table, "birth_day")
	c.Content = field.NewField(table, "content")
	c.Comment = field.NewString(table, "comment")

	c.fillFieldMap()

	return c
}

func (c *character) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *character) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.Id
	c.fieldMap["gmt_create"] = c.GmtCreate
	c.fieldMap["gmt_update"] = c.GmtUpdate
	c.fieldMap["name"] = c.Name
	c.fieldMap["origin_name"] = c.OriginName
	c.fieldMap["other_name"] = c.OtherName
	c.fieldMap["birth_year"] = c.BirthYear
	c.fieldMap["birth_month"] = c.BirthMonth
	c.fieldMap["birth_day"] = c.BirthDay
	c.fieldMap["content"] = c.Content
	c.fieldMap["comment"] = c.Comment
}

func (c character) clone(db *gorm.DB) character {
	c.characterDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c character) replaceDB(db *gorm.DB) character {
	c.characterDo.ReplaceDB(db)
	return c
}

type characterDo struct{ gen.DO }

type ICharacterDo interface {
	gen.SubQuery
	Debug() ICharacterDo
	WithContext(ctx context.Context) ICharacterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICharacterDo
	WriteDB() ICharacterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICharacterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICharacterDo
	Not(conds ...gen.Condition) ICharacterDo
	Or(conds ...gen.Condition) ICharacterDo
	Select(conds ...field.Expr) ICharacterDo
	Where(conds ...gen.Condition) ICharacterDo
	Order(conds ...field.Expr) ICharacterDo
	Distinct(cols ...field.Expr) ICharacterDo
	Omit(cols ...field.Expr) ICharacterDo
	Join(table schema.Tabler, on ...field.Expr) ICharacterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICharacterDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICharacterDo
	Group(cols ...field.Expr) ICharacterDo
	Having(conds ...gen.Condition) ICharacterDo
	Limit(limit int) ICharacterDo
	Offset(offset int) ICharacterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICharacterDo
	Unscoped() ICharacterDo
	Create(values ...*model.Character) error
	CreateInBatches(values []*model.Character, batchSize int) error
	Save(values ...*model.Character) error
	First() (*model.Character, error)
	Take() (*model.Character, error)
	Last() (*model.Character, error)
	Find() ([]*model.Character, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Character, err error)
	FindInBatches(result *[]*model.Character, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Character) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICharacterDo
	Assign(attrs ...field.AssignExpr) ICharacterDo
	Joins(fields ...field.RelationField) ICharacterDo
	Preload(fields ...field.RelationField) ICharacterDo
	FirstOrInit() (*model.Character, error)
	FirstOrCreate() (*model.Character, error)
	FindByPage(offset int, limit int) (result []*model.Character, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICharacterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c characterDo) Debug() ICharacterDo {
	return c.withDO(c.DO.Debug())
}

func (c characterDo) WithContext(ctx context.Context) ICharacterDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c characterDo) ReadDB() ICharacterDo {
	return c.Clauses(dbresolver.Read)
}

func (c characterDo) WriteDB() ICharacterDo {
	return c.Clauses(dbresolver.Write)
}

func (c characterDo) Session(config *gorm.Session) ICharacterDo {
	return c.withDO(c.DO.Session(config))
}

func (c characterDo) Clauses(conds ...clause.Expression) ICharacterDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c characterDo) Returning(value interface{}, columns ...string) ICharacterDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c characterDo) Not(conds ...gen.Condition) ICharacterDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c characterDo) Or(conds ...gen.Condition) ICharacterDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c characterDo) Select(conds ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c characterDo) Where(conds ...gen.Condition) ICharacterDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c characterDo) Order(conds ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c characterDo) Distinct(cols ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c characterDo) Omit(cols ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c characterDo) Join(table schema.Tabler, on ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c characterDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c characterDo) RightJoin(table schema.Tabler, on ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c characterDo) Group(cols ...field.Expr) ICharacterDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c characterDo) Having(conds ...gen.Condition) ICharacterDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c characterDo) Limit(limit int) ICharacterDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c characterDo) Offset(offset int) ICharacterDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c characterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICharacterDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c characterDo) Unscoped() ICharacterDo {
	return c.withDO(c.DO.Unscoped())
}

func (c characterDo) Create(values ...*model.Character) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c characterDo) CreateInBatches(values []*model.Character, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c characterDo) Save(values ...*model.Character) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c characterDo) First() (*model.Character, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Character), nil
	}
}

func (c characterDo) Take() (*model.Character, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Character), nil
	}
}

func (c characterDo) Last() (*model.Character, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Character), nil
	}
}

func (c characterDo) Find() ([]*model.Character, error) {
	result, err := c.DO.Find()
	return result.([]*model.Character), err
}

func (c characterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Character, err error) {
	buf := make([]*model.Character, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c characterDo) FindInBatches(result *[]*model.Character, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c characterDo) Attrs(attrs ...field.AssignExpr) ICharacterDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c characterDo) Assign(attrs ...field.AssignExpr) ICharacterDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c characterDo) Joins(fields ...field.RelationField) ICharacterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c characterDo) Preload(fields ...field.RelationField) ICharacterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c characterDo) FirstOrInit() (*model.Character, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Character), nil
	}
}

func (c characterDo) FirstOrCreate() (*model.Character, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Character), nil
	}
}

func (c characterDo) FindByPage(offset int, limit int) (result []*model.Character, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c characterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c characterDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c characterDo) Delete(models ...*model.Character) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *characterDo) withDO(do gen.Dao) *characterDo {
	c.DO = *do.(*gen.DO)
	return c
}
