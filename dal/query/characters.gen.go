// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qxdn/birthday/dal/entity"
)

func newCharactersDO(db *gorm.DB, opts ...gen.DOOption) charactersDO {
	_charactersDO := charactersDO{}

	_charactersDO.charactersDODo.UseDB(db, opts...)
	_charactersDO.charactersDODo.UseModel(&entity.CharactersDO{})

	tableName := _charactersDO.charactersDODo.TableName()
	_charactersDO.ALL = field.NewAsterisk(tableName)
	_charactersDO.ID = field.NewInt64(tableName, "id")
	_charactersDO.GmtCreate = field.NewTime(tableName, "gmt_create")
	_charactersDO.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_charactersDO.BirthDay = field.NewInt32(tableName, "birth_day")
	_charactersDO.BirthMonth = field.NewInt32(tableName, "birth_month")
	_charactersDO.BirthYear = field.NewInt32(tableName, "birth_year")
	_charactersDO.Comment = field.NewString(tableName, "comment")
	_charactersDO.Content = field.NewString(tableName, "content")
	_charactersDO.Gender = field.NewString(tableName, "gender")
	_charactersDO.Name = field.NewString(tableName, "name")
	_charactersDO.OriginName = field.NewString(tableName, "origin_name")
	_charactersDO.OtherName = field.NewString(tableName, "other_name")

	_charactersDO.fillFieldMap()

	return _charactersDO
}

type charactersDO struct {
	charactersDODo

	ALL        field.Asterisk
	ID         field.Int64
	GmtCreate  field.Time
	GmtUpdate  field.Time
	BirthDay   field.Int32
	BirthMonth field.Int32
	BirthYear  field.Int32
	Comment    field.String
	Content    field.String
	Gender     field.String
	Name       field.String
	OriginName field.String
	OtherName  field.String

	fieldMap map[string]field.Expr
}

func (c charactersDO) Table(newTableName string) *charactersDO {
	c.charactersDODo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c charactersDO) As(alias string) *charactersDO {
	c.charactersDODo.DO = *(c.charactersDODo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *charactersDO) updateTableName(table string) *charactersDO {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.GmtCreate = field.NewTime(table, "gmt_create")
	c.GmtUpdate = field.NewTime(table, "gmt_update")
	c.BirthDay = field.NewInt32(table, "birth_day")
	c.BirthMonth = field.NewInt32(table, "birth_month")
	c.BirthYear = field.NewInt32(table, "birth_year")
	c.Comment = field.NewString(table, "comment")
	c.Content = field.NewString(table, "content")
	c.Gender = field.NewString(table, "gender")
	c.Name = field.NewString(table, "name")
	c.OriginName = field.NewString(table, "origin_name")
	c.OtherName = field.NewString(table, "other_name")

	c.fillFieldMap()

	return c
}

func (c *charactersDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *charactersDO) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["gmt_create"] = c.GmtCreate
	c.fieldMap["gmt_update"] = c.GmtUpdate
	c.fieldMap["birth_day"] = c.BirthDay
	c.fieldMap["birth_month"] = c.BirthMonth
	c.fieldMap["birth_year"] = c.BirthYear
	c.fieldMap["comment"] = c.Comment
	c.fieldMap["content"] = c.Content
	c.fieldMap["gender"] = c.Gender
	c.fieldMap["name"] = c.Name
	c.fieldMap["origin_name"] = c.OriginName
	c.fieldMap["other_name"] = c.OtherName
}

func (c charactersDO) clone(db *gorm.DB) charactersDO {
	c.charactersDODo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c charactersDO) replaceDB(db *gorm.DB) charactersDO {
	c.charactersDODo.ReplaceDB(db)
	return c
}

type charactersDODo struct{ gen.DO }

type ICharactersDODo interface {
	gen.SubQuery
	Debug() ICharactersDODo
	WithContext(ctx context.Context) ICharactersDODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICharactersDODo
	WriteDB() ICharactersDODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICharactersDODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICharactersDODo
	Not(conds ...gen.Condition) ICharactersDODo
	Or(conds ...gen.Condition) ICharactersDODo
	Select(conds ...field.Expr) ICharactersDODo
	Where(conds ...gen.Condition) ICharactersDODo
	Order(conds ...field.Expr) ICharactersDODo
	Distinct(cols ...field.Expr) ICharactersDODo
	Omit(cols ...field.Expr) ICharactersDODo
	Join(table schema.Tabler, on ...field.Expr) ICharactersDODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICharactersDODo
	RightJoin(table schema.Tabler, on ...field.Expr) ICharactersDODo
	Group(cols ...field.Expr) ICharactersDODo
	Having(conds ...gen.Condition) ICharactersDODo
	Limit(limit int) ICharactersDODo
	Offset(offset int) ICharactersDODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICharactersDODo
	Unscoped() ICharactersDODo
	Create(values ...*entity.CharactersDO) error
	CreateInBatches(values []*entity.CharactersDO, batchSize int) error
	Save(values ...*entity.CharactersDO) error
	First() (*entity.CharactersDO, error)
	Take() (*entity.CharactersDO, error)
	Last() (*entity.CharactersDO, error)
	Find() ([]*entity.CharactersDO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CharactersDO, err error)
	FindInBatches(result *[]*entity.CharactersDO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CharactersDO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICharactersDODo
	Assign(attrs ...field.AssignExpr) ICharactersDODo
	Joins(fields ...field.RelationField) ICharactersDODo
	Preload(fields ...field.RelationField) ICharactersDODo
	FirstOrInit() (*entity.CharactersDO, error)
	FirstOrCreate() (*entity.CharactersDO, error)
	FindByPage(offset int, limit int) (result []*entity.CharactersDO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICharactersDODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c charactersDODo) Debug() ICharactersDODo {
	return c.withDO(c.DO.Debug())
}

func (c charactersDODo) WithContext(ctx context.Context) ICharactersDODo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c charactersDODo) ReadDB() ICharactersDODo {
	return c.Clauses(dbresolver.Read)
}

func (c charactersDODo) WriteDB() ICharactersDODo {
	return c.Clauses(dbresolver.Write)
}

func (c charactersDODo) Session(config *gorm.Session) ICharactersDODo {
	return c.withDO(c.DO.Session(config))
}

func (c charactersDODo) Clauses(conds ...clause.Expression) ICharactersDODo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c charactersDODo) Returning(value interface{}, columns ...string) ICharactersDODo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c charactersDODo) Not(conds ...gen.Condition) ICharactersDODo {
	return c.withDO(c.DO.Not(conds...))
}

func (c charactersDODo) Or(conds ...gen.Condition) ICharactersDODo {
	return c.withDO(c.DO.Or(conds...))
}

func (c charactersDODo) Select(conds ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.Select(conds...))
}

func (c charactersDODo) Where(conds ...gen.Condition) ICharactersDODo {
	return c.withDO(c.DO.Where(conds...))
}

func (c charactersDODo) Order(conds ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.Order(conds...))
}

func (c charactersDODo) Distinct(cols ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c charactersDODo) Omit(cols ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c charactersDODo) Join(table schema.Tabler, on ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c charactersDODo) LeftJoin(table schema.Tabler, on ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c charactersDODo) RightJoin(table schema.Tabler, on ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c charactersDODo) Group(cols ...field.Expr) ICharactersDODo {
	return c.withDO(c.DO.Group(cols...))
}

func (c charactersDODo) Having(conds ...gen.Condition) ICharactersDODo {
	return c.withDO(c.DO.Having(conds...))
}

func (c charactersDODo) Limit(limit int) ICharactersDODo {
	return c.withDO(c.DO.Limit(limit))
}

func (c charactersDODo) Offset(offset int) ICharactersDODo {
	return c.withDO(c.DO.Offset(offset))
}

func (c charactersDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICharactersDODo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c charactersDODo) Unscoped() ICharactersDODo {
	return c.withDO(c.DO.Unscoped())
}

func (c charactersDODo) Create(values ...*entity.CharactersDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c charactersDODo) CreateInBatches(values []*entity.CharactersDO, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c charactersDODo) Save(values ...*entity.CharactersDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c charactersDODo) First() (*entity.CharactersDO, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CharactersDO), nil
	}
}

func (c charactersDODo) Take() (*entity.CharactersDO, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CharactersDO), nil
	}
}

func (c charactersDODo) Last() (*entity.CharactersDO, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CharactersDO), nil
	}
}

func (c charactersDODo) Find() ([]*entity.CharactersDO, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CharactersDO), err
}

func (c charactersDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CharactersDO, err error) {
	buf := make([]*entity.CharactersDO, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c charactersDODo) FindInBatches(result *[]*entity.CharactersDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c charactersDODo) Attrs(attrs ...field.AssignExpr) ICharactersDODo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c charactersDODo) Assign(attrs ...field.AssignExpr) ICharactersDODo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c charactersDODo) Joins(fields ...field.RelationField) ICharactersDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c charactersDODo) Preload(fields ...field.RelationField) ICharactersDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c charactersDODo) FirstOrInit() (*entity.CharactersDO, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CharactersDO), nil
	}
}

func (c charactersDODo) FirstOrCreate() (*entity.CharactersDO, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CharactersDO), nil
	}
}

func (c charactersDODo) FindByPage(offset int, limit int) (result []*entity.CharactersDO, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c charactersDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c charactersDODo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c charactersDODo) Delete(models ...*entity.CharactersDO) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *charactersDODo) withDO(do gen.Dao) *charactersDODo {
	c.DO = *do.(*gen.DO)
	return c
}
